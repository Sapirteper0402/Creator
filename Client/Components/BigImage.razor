@using FinalProject_SapirTeper_OfirEinhoren.Shared.Entities
@inject HttpClient Http

<section>
    <EditForm Model="OneBlock">
        <div class="BigBigDivComp">
            <div class="DivNumberCompNone"></div>
            <div class="ComponentDivClass">
                <div class="ComponentDivLineStyle">
                    <div Style="float: left;">
                        <MudTooltip Duration="1000" Text="מחיקת רכיב" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Rounded.Close" Color="Color.Primary" Size="Size.Medium" @onclick="DeleteBlock" aria-label="delete"></MudIconButton>
                        </MudTooltip>
                    </div>
                    <div Style="float: left;">
                        @if (myFileImage2 != OneBlock.BlockContent)
                        {
                            if (Filled == 1)
                            {
                                ChangeToZero();
                            }
                            <MudTooltip Duration="1000" Text="שמירת רכיב" Placement="Placement.Top">
                                <MudIconButton Icon="@Icons.Rounded.Save" Color="Color.Error" @onclick="SaveFunc" aria-label="save"></MudIconButton>
                            </MudTooltip>
                            <span class="SaveSpanTxt">לחצו לשמירה</span>
                        }
                        else
                        {
                            <MudTooltip Duration="1000" Text="שמירת רכיב" Placement="Placement.Top">
                                <MudIconButton Icon="@Icons.Rounded.CheckCircleOutline" Color="Color.Success" @onclick="SaveFunc" aria-label="save"></MudIconButton>
                            </MudTooltip>
                            <span class="SaveSpanTxt">נשמר</span>
                        }
                    </div>
                    <div class="CompDivTitle">
                        <span class="CompTitle">תמונה גדולה</span>
                        <span class="CompDescription">התמונה תופיע בגודל 450 פיקסלים</span>
                    </div>

                    <div style="margin: 0% 34%; display: inline-flex;">
                        <MudButton Style="display: inline-flex;
                                    width: 200px;
                                    height: 130px;
                                    justify-content: space-around;
                                    border-radius: 13px;
                                    color: #676767;
                                    border: 1px solid #C5C5C5;
                                    cursor: pointer;
                                    align-items: center;
                                    padding: 16px;
                                    font: normal normal normal 14px/8px Segoe UI;
                                    background: white;
                                    box-shadow: 0px 0px 1px 0px #444444;"
                                   Class="ma-2" Variant="Variant.Filled" for="@FileInputID" HtmlTag="label">
                            @if (string.IsNullOrEmpty(myFileImage2))
                            {
                                <span style="font-size: 9pt; letter-spacing: 1px; line-height: 1;">לחצו להוספת תמונה</span>
                                <MudIcon Icon="@Icons.Rounded.AddPhotoAlternate" Size="Size.Medium" Title="Add Photo" />
                            }
                            else
                            {
                                <img src="@myFileImage2" width="180" />
                            }
                        </MudButton>

                        @if (string.IsNullOrEmpty(myFileImage2) == false)
                        {
                            <div style="padding-top: 7%; margin-right: -1%;">
                                <div>
                                    <MudTooltip Duration="1000" Text="החלפת תמונה" Placement="Placement.Left">
                                        <MudIconButton Icon="@Icons.Rounded.Edit" Size="Size.Small" for="@FileInputID" HtmlTag="label" aria-label="edit"></MudIconButton>
                                    </MudTooltip>
                                </div>
                                <div Style="display: inline-flex;">
                                    <MudTooltip Duration="1000" Text="מחיקת תמונה" Placement="Placement.Left">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" aria-label="delete" @onclick="DeleteImage"></MudIconButton>
                                    </MudTooltip>
                                </div>
                            </div>
                        }

                        <InputFile id="@FileInputID" OnChange="UploadFile2" hidden />
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</section>



@code{

    //פרמטר של רשומה שלמה מתוך עמוד עריכה
    [Parameter]
    public Block OneBlock { get; set; }

    //פרמטרים למחיקת רכיב
    [Parameter]
    public int IDNum { get; set; }

    [Parameter]
    public EventCallback<int> NumberParamChanged { get; set; }


    //פרמטרים לכפתור שמירה
    [Parameter]
    public int Filled { get; set; }

    [Parameter]
    public EventCallback<int> UpdateFilledPlus { get; set; }

    [Parameter]
    public EventCallback<int> UpdateFilledMinus { get; set; }


    //משתנים לשמירת תמונה
    string myFileImage2;
    long maxFileSize = 4194304;
    string FileInputID;

    //רשימה למחיקת תמונה
    List<string> DeletedImages = new List<string>();



    protected override async Task OnInitializedAsync()
    {
        FileInputID = "FileInput" + OneBlock.ID;

        //הצגת תמונה קיימת מהטבלה
        myFileImage2 = OneBlock.BlockContent;
    }


    //העלאת תמונה
    private async Task UploadFile2(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);

                string resizeUrl = "";
                if (string.IsNullOrEmpty(myFileImage2))
                {
                    var saveResponse = await Http.PostAsJsonAsync("api/Blocks/upload", imageBase64);
                    if (saveResponse.IsSuccessStatusCode == true)
                    {
                        resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    }
                }
                else
                {
                    List<string> strings = new List<string>()
            {
                        imageBase64, myFileImage2
                    };
                    var saveResponse = await Http.PostAsJsonAsync("api/Blocks/updateImage", strings);
                    if (saveResponse.IsSuccessStatusCode == true)
                    {
                        resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    }
                }
                myFileImage2 = resizeUrl;
            }
        }
    }


    //מחיקת רכיב
    private async Task DeleteBlock()
    {
        var deleteResponse = await Http.DeleteAsync("api/Blocks/" + OneBlock.ID);
        bool isDeleted = deleteResponse.Content.ReadFromJsonAsync<bool>().Result;

        if (isDeleted == true && deleteResponse.IsSuccessStatusCode == true)
        {
            sendIDToDelete();
        }

        FileInputID = "FileInput" + OneBlock.ID;

        //הצגת תמונה קיימת מהטבלה
        myFileImage2 = OneBlock.BlockContent;
    }


    private void sendIDToDelete()
    {
        IDNum = OneBlock.ID;
        NumberParamChanged.InvokeAsync(IDNum);
    }


    //מחיקת תמונה
    private async Task DeleteImage()
    {
        var saveResponse = await Http.PostAsJsonAsync("api/Blocks/deleteImages", myFileImage2);

        if (saveResponse.IsSuccessStatusCode == true)
        {
            myFileImage2 = "";
        }
    }


    //שמירת רכיב
    private async Task SaveFunc()
    {
        await Task.Yield();
        OneBlock.BlockContent = myFileImage2;
        OneBlock.ToContinue = 1;

        var updateResponse = await Http.PostAsJsonAsync("api/Blocks/Update", OneBlock);
        if (updateResponse.IsSuccessStatusCode == true)
        {
            if (string.IsNullOrEmpty(OneBlock.BlockContent) == false)
            {
                Filled = 1;
                UpdateFilledPlus.InvokeAsync(Filled);
            }
        }
    }


    //שינוי הערך בכפתור המשך לאפס
    private async Task ChangeToZero()
    {
        OneBlock.ToContinue = 0;

        var updateResponse = await Http.PostAsJsonAsync("api/Blocks/Update", OneBlock);
        if (updateResponse.IsSuccessStatusCode == true)
        {
            Filled = 0;
            UpdateFilledMinus.InvokeAsync(Filled);
        }
    }

}