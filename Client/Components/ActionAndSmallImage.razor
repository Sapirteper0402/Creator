@using FinalProject_SapirTeper_OfirEinhoren.Shared.Entities
@using FinalProject_SapirTeper_OfirEinhoren.Shared.BlocksClass
@inject HttpClient Http
@using System.Text.Json


<section>
    <EditForm Model="OneBlock">
        <div class="BigBigDivComp">
            <div class="DivNumberComp">
                @if (NumForNumber != 0)
                {
                    <div style="width: 33px; height: 33px; position: relative; top: -10px; ">
                        <MudTooltip Duration="1000" Text="להורדת / הוספת מספור" Placement="Placement.Top">
                            <MudIconButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="NoneNumber" Style="width: 33px; height: 33px; color: #08A47B; font: normal normal 600 10pt/20px Segoe UI; border-radius: 8px;"><span style="font: normal normal 600 12pt/20px Segoe UI;">@NumForNumber.ToString().</span></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else
                {
                    <div style="width: 33px; height: 33px; position: relative; top: -10px; ">
                        <MudTooltip Duration="1000" Text="להורדת / הוספת מספור" Placement="Placement.Top">
                            <MudIconButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="NoneNumber" Style="width: 33px; height: 33px; color: #08A47B; font: normal normal 600 10pt/20px Segoe UI; border-radius: 8px;"> </MudIconButton>
                        </MudTooltip>
                    </div>
                }
            </div>
            <div class="ComponentDivClass">
                <div class="ComponentDivLineStyle">
                    <div Style="float: left;">
                        <MudTooltip Duration="1000" Text="מחיקת רכיב" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Rounded.Close" Color="Color.Primary" Size="Size.Medium" @onclick="DeleteBlock" aria-label="delete"></MudIconButton>
                        </MudTooltip>
                    </div>
                    <div Style="float: left;">
                        @if (TxtString != B.ActionAndImg_Text || myFileImage4 != B.ActionAndImg_Img || selected != B.ActionAndImg_Value)
                        {
                            if (Filled == 1)
                            {
                                ChangeToZero();
                            }
                            <MudTooltip Duration="1000" Text="שמירת רכיב" Placement="Placement.Top">
                                <MudIconButton Icon="@Icons.Rounded.Save" Color="Color.Error" @onclick="SaveFunc" aria-label="save"></MudIconButton>
                            </MudTooltip>
                            <span class="SaveSpanTxt">לחצו לשמירה</span>
                        }
                        else
                        {
                            <MudTooltip Duration="1000" Text="שמירת רכיב" Placement="Placement.Top">
                                <MudIconButton Icon="@Icons.Rounded.CheckCircleOutline" Color="Color.Success" @onclick="SaveFunc" aria-label="save"></MudIconButton>
                            </MudTooltip>
                            <span class="SaveSpanTxt">נשמר</span>
                        }
                    </div>
                    <div class="CompDivTitle">
                        <span class="CompTitle">פעולה + תמונה</span>
                        <span class="CompDescription">בחרו את הפעולה הרצויה והוסיפו תמונה</span>
                    </div>
                    <div style="margin: 1% 4%; display: flex;">
                        <div style=" width: 40%; margin-left: 1%; ">
                            <MudSelect T="string" Dense="true" Label="בחרו פעולה" @bind-Value="@B.ActionAndImg_Value" Margin="Margin.Dense" style="font: normal 13px/22px Segoe UI;" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="@("לחצו על")" />
                                <MudSelectItem Value="@("בחרו ב")" />
                                <MudSelectItem Value="@("הקלידו")" />
                                <MudSelectItem Value="@("גררו את")" />
                                <MudSelectItem Value="@("סמנו את")" />
                            </MudSelect>
                        </div>
                        <div style=" width: 20%; margin-right: 1%; margin-top: -0.8%; display: inline-flex; margin-left: 1.5%;">
                            <MudButton Style="display: inline-flex;
                            width: 90%;
                            height: 50px;
                            justify-content: space-around;
                            border-radius: 16px;
                            color: #676767;
                            border: 0.8px solid #C5C5C5;
                            cursor: pointer;
                            align-items: center;
                            padding: 16px;
                            font: normal normal normal 14px/8px Segoe UI;
                            background: white;
                            box-shadow: 0px 0px 1px 0px #444444;"
                                       Class="ma-2" Variant="Variant.Filled" for="@FileInputID" HtmlTag="label">

                                @if (string.IsNullOrEmpty(myFileImage4))
                                {
                                    <MudIcon Icon="@Icons.Rounded.AddPhotoAlternate" Size="Size.Medium" Title="העלאת תמונה" />
                                }
                                else
                                {
                                    <img src="@myFileImage4" width="70" />
                                }
                            </MudButton>

                            @if (string.IsNullOrEmpty(myFileImage4) == false)
                            {
                                <div style="padding-top: 7%; margin-right: -1%;">
                                    <div>
                                        <MudTooltip Duration="1000" Text="החלפת תמונה" Placement="Placement.Left">
                                            <MudIconButton Icon="@Icons.Rounded.Edit" Size="Size.Small" for="@FileInputID" HtmlTag="label" aria-label="edit"></MudIconButton>
                                        </MudTooltip>
                                    </div>
                                    <div Style="display: inline-flex;">
                                        <MudTooltip Duration="1000" Text="מחיקת תמונה" Placement="Placement.Left">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" aria-label="delete" @onclick="DeleteImage"></MudIconButton>
                                        </MudTooltip>
                                    </div>
                                </div>
                            }
                            <InputFile id="@FileInputID" OnChange="UploadFile4" hidden />
                        </div>
                        <MudTextField @bind-Value="B.ActionAndImg_Text" Margin="Margin.Dense" style="width: 100%; font: normal 13px/22px Segoe UI; height: 37px; display: inline-block;" Label="כתבו את המשך המשפט כאן" Variant="Variant.Outlined" />
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</section>

@code{

    ActionAndSmallImageBlock B = new ActionAndSmallImageBlock();

    string selected;
    string TxtString;

    [Parameter]
    public Block OneBlock { get; set; }

    //פרמטרים למחיקת הרכיב
    [Parameter]
    public int IDNum { get; set; }

    [Parameter]
    public EventCallback<int> NumberParamChanged { get; set; }

    //פרמטרים למספור
    [Parameter]
    public int NumForNumber { get; set; }

    [Parameter]
    public EventCallback<int> NumChanged { get; set; }


    //פרמטרים לכפתור שמירה
    [Parameter]
    public int Filled { get; set; }

    [Parameter]
    public EventCallback<int> UpdateFilledPlus { get; set; }

    [Parameter]
    public EventCallback<int> UpdateFilledMinus { get; set; }


    //פרמטרים לשמירת תמונה
    string myFileImage4;
    long maxFileSize = 4194304;
    string FileInputID;

    //רשימה למחיקת תמונה
    List<string> DeletedImages = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        if (OneBlock.BlockContent != string.Empty)
        {
            B = JsonSerializer.Deserialize<ActionAndSmallImageBlock>(OneBlock.BlockContent);

            myFileImage4 = B.ActionAndImg_Img;
            selected = B.ActionAndImg_Value;
            TxtString = B.ActionAndImg_Text;
        }

        FileInputID = "FileInput" + OneBlock.ID;
    }


    //העלאת תמונה
    private async Task UploadFile4(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);

                string resizeUrl = "";
                if (string.IsNullOrEmpty(myFileImage4))
                {
                    var saveResponse = await Http.PostAsJsonAsync("api/Blocks/upload", imageBase64);
                    if (saveResponse.IsSuccessStatusCode == true)
                    {
                        resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    }
                }
                else
                {
                    List<string> strings = new List<string>()
    {
                        imageBase64, myFileImage4
                    };
                    var saveResponse = await Http.PostAsJsonAsync("api/Blocks/updateImage", strings);
                    if (saveResponse.IsSuccessStatusCode == true)
                    {
                        resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    }
                }
                myFileImage4 = resizeUrl;
            }
        }
    }


    //מחיקת תמונה
    private async Task DeleteImage()
    {
        var saveResponse = await Http.PostAsJsonAsync("api/Blocks/deleteImages", myFileImage4);

        if (saveResponse.IsSuccessStatusCode == true)
        {
            myFileImage4 = "";
        }
    }


    //מחיקת רכיב
    private async Task DeleteBlock()
    {
        var deleteResponse = await Http.DeleteAsync("api/Blocks/" + OneBlock.ID);
        bool isDeleted = deleteResponse.Content.ReadFromJsonAsync<bool>().Result;

        if (isDeleted == true && deleteResponse.IsSuccessStatusCode == true)
        {
            sendIDToDelete();
        }


        //איפוס המחלקה
        if (OneBlock.BlockContent != string.Empty)
        {
            B = JsonSerializer.Deserialize<ActionAndSmallImageBlock>(OneBlock.BlockContent);

            myFileImage4 = B.ActionAndImg_Img;
            selected = B.ActionAndImg_Value;
            TxtString = B.ActionAndImg_Text;
        }

        FileInputID = "FileInput" + OneBlock.ID;


    }

    private void sendIDToDelete()
    {
        IDNum = OneBlock.ID;
        NumberParamChanged.InvokeAsync(IDNum);
    }


    //שמירה
    private async Task SaveFunc()
    {
        await Task.Yield();
        OneBlock.Number = NumForNumber;
        TxtString = B.ActionAndImg_Text;
        selected = B.ActionAndImg_Value;
        B.ActionAndImg_Img = myFileImage4;

        OneBlock.BlockContent = JsonSerializer.Serialize(B);

        if (string.IsNullOrEmpty(TxtString) == false && string.IsNullOrEmpty(selected) == false && string.IsNullOrEmpty(myFileImage4) == false)
        {
            OneBlock.ToContinue = 1;
        }

        var updateResponse = await Http.PostAsJsonAsync("api/Blocks/Update", OneBlock);
        if (updateResponse.IsSuccessStatusCode == true)
        {
            if (string.IsNullOrEmpty(TxtString) == false && string.IsNullOrEmpty(selected) == false && string.IsNullOrEmpty(myFileImage4) == false)
            {
                Filled = 1;
                UpdateFilledPlus.InvokeAsync(Filled);
            }
        }
    }


    //שינוי הערך בכפתור המשך לאפס
    private async Task ChangeToZero()
    {
        OneBlock.ToContinue = 0;

        var updateResponse = await Http.PostAsJsonAsync("api/Blocks/Update", OneBlock);
        if (updateResponse.IsSuccessStatusCode == true)
        {
            Filled = 0;
            UpdateFilledMinus.InvokeAsync(Filled);
        }
    }


    //הוספת ומחיקת מיספור
    private async Task NoneNumber()
    {
        await Task.Yield();

        if (NumForNumber != 0)
        {
            NumForNumber = 0;
        }
        else
        {
            NumForNumber = 1;
        }

        OneBlock.Number = NumForNumber;
        OneBlock.BlockContent = JsonSerializer.Serialize(B);
        SaveFunc();
        NumChanged.InvokeAsync(NumForNumber);
    }
}